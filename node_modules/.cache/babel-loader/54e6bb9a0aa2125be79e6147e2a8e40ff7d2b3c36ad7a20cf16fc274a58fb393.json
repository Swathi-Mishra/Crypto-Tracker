{"ast":null,"code":"// src/features/crypto/cryptoSlice.js\nimport{createSlice}from'@reduxjs/toolkit';import sampleData from'../../utils/sampleData';const cryptoSlice=createSlice({name:'crypto',initialState:{assets:sampleData},reducers:{updatePrices:state=>{state.assets=state.assets.map(asset=>{const newPrice=parseFloat((asset.price*(1+Math.random()*0.02-0.01)).toFixed(2));return{...asset,price:newPrice,percentChange1h:parseFloat((Math.random()*2-1).toFixed(2)),percentChange24h:parseFloat((Math.random()*3-1.5).toFixed(2)),percentChange7d:parseFloat((Math.random()*15-7.5).toFixed(2)),volume24h:Math.max(0,asset.volume24h+Math.floor(Math.random()*1000000-500000)),lastUpdated:new Date().toISOString()};});}}});export const{updatePrices}=cryptoSlice.actions;export default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","sampleData","cryptoSlice","name","initialState","assets","reducers","updatePrices","state","map","asset","newPrice","parseFloat","price","Math","random","toFixed","percentChange1h","percentChange24h","percentChange7d","volume24h","max","floor","lastUpdated","Date","toISOString","actions","reducer"],"sources":["C:/Users/admin/Downloads/crypto-tracker/src/features/crypto/cryptoSlice.js"],"sourcesContent":["// src/features/crypto/cryptoSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nimport sampleData from '../../utils/sampleData';\n\nconst cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState: {\n    assets: sampleData,\n  },\n  reducers: {\n    updatePrices: (state) => {\n      state.assets = state.assets.map(asset => {\n        const newPrice = parseFloat((asset.price * (1 + Math.random() * 0.02 - 0.01)).toFixed(2));\n        return {\n          ...asset,\n          price: newPrice,\n          percentChange1h: parseFloat((Math.random() * 2 - 1).toFixed(2)),\n          percentChange24h: parseFloat((Math.random() * 3 - 1.5).toFixed(2)),\n          percentChange7d: parseFloat((Math.random() * 15 - 7.5).toFixed(2)),\n          volume24h: Math.max(0, asset.volume24h + Math.floor(Math.random() * 1_000_000 - 500_000)),\n          lastUpdated: new Date().toISOString()\n        };\n      });\n    }\n  }\n});\n\nexport const { updatePrices } = cryptoSlice.actions;\nexport default cryptoSlice.reducer;\n"],"mappings":"AAAA;AACA,OAASA,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,UAAU,KAAM,wBAAwB,CAE/C,KAAM,CAAAC,WAAW,CAAGF,WAAW,CAAC,CAC9BG,IAAI,CAAE,QAAQ,CACdC,YAAY,CAAE,CACZC,MAAM,CAAEJ,UACV,CAAC,CACDK,QAAQ,CAAE,CACRC,YAAY,CAAGC,KAAK,EAAK,CACvBA,KAAK,CAACH,MAAM,CAAGG,KAAK,CAACH,MAAM,CAACI,GAAG,CAACC,KAAK,EAAI,CACvC,KAAM,CAAAC,QAAQ,CAAGC,UAAU,CAAC,CAACF,KAAK,CAACG,KAAK,EAAI,CAAC,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,IAAI,CAAG,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,CACzF,MAAO,CACL,GAAGN,KAAK,CACRG,KAAK,CAAEF,QAAQ,CACfM,eAAe,CAAEL,UAAU,CAAC,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,CAAG,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,CAC/DE,gBAAgB,CAAEN,UAAU,CAAC,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,CAAC,CAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,CAClEG,eAAe,CAAEP,UAAU,CAAC,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,CAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC,CAClEI,SAAS,CAAEN,IAAI,CAACO,GAAG,CAAC,CAAC,CAAEX,KAAK,CAACU,SAAS,CAAGN,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,OAAS,CAAG,MAAO,CAAC,CAAC,CACzFQ,WAAW,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACtC,CAAC,CACH,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAElB,YAAa,CAAC,CAAGL,WAAW,CAACwB,OAAO,CACnD,cAAe,CAAAxB,WAAW,CAACyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}