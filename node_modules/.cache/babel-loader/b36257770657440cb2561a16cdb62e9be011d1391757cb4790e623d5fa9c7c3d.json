{"ast":null,"code":"// src/features/crypto/cryptoSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nimport sampleData from '../../utils/sampleData';\nconst cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState: {\n    assets: sampleData\n  },\n  reducers: {\n    updatePrices: state => {\n      state.assets = state.assets.map(asset => {\n        const newPrice = parseFloat((asset.price * (1 + Math.random() * 0.02 - 0.01)).toFixed(2));\n        return {\n          ...asset,\n          price: newPrice,\n          percentChange1h: parseFloat((Math.random() * 2 - 1).toFixed(2)),\n          percentChange24h: parseFloat((Math.random() * 3 - 1.5).toFixed(2)),\n          percentChange7d: parseFloat((Math.random() * 15 - 7.5).toFixed(2)),\n          volume24h: Math.max(0, asset.volume24h + Math.floor(Math.random() * 1000000 - 500000)),\n          lastUpdated: new Date().toISOString()\n        };\n      });\n    }\n  }\n});\nexport const {\n  updatePrices\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","sampleData","cryptoSlice","name","initialState","assets","reducers","updatePrices","state","map","asset","newPrice","parseFloat","price","Math","random","toFixed","percentChange1h","percentChange24h","percentChange7d","volume24h","max","floor","lastUpdated","Date","toISOString","actions","reducer"],"sources":["C:/Users/admin/Downloads/crypto-tracker/src/features/crypto/cryptoSlice.js"],"sourcesContent":["// src/features/crypto/cryptoSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nimport sampleData from '../../utils/sampleData';\n\nconst cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState: {\n    assets: sampleData,\n  },\n  reducers: {\n    updatePrices: (state) => {\n      state.assets = state.assets.map(asset => {\n        const newPrice = parseFloat((asset.price * (1 + Math.random() * 0.02 - 0.01)).toFixed(2));\n        return {\n          ...asset,\n          price: newPrice,\n          percentChange1h: parseFloat((Math.random() * 2 - 1).toFixed(2)),\n          percentChange24h: parseFloat((Math.random() * 3 - 1.5).toFixed(2)),\n          percentChange7d: parseFloat((Math.random() * 15 - 7.5).toFixed(2)),\n          volume24h: Math.max(0, asset.volume24h + Math.floor(Math.random() * 1_000_000 - 500_000)),\n          lastUpdated: new Date().toISOString()\n        };\n      });\n    }\n  }\n});\n\nexport const { updatePrices } = cryptoSlice.actions;\nexport default cryptoSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,wBAAwB;AAE/C,MAAMC,WAAW,GAAGF,WAAW,CAAC;EAC9BG,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,MAAM,EAAEJ;EACV,CAAC;EACDK,QAAQ,EAAE;IACRC,YAAY,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACH,MAAM,GAAGG,KAAK,CAACH,MAAM,CAACI,GAAG,CAACC,KAAK,IAAI;QACvC,MAAMC,QAAQ,GAAGC,UAAU,CAAC,CAACF,KAAK,CAACG,KAAK,IAAI,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzF,OAAO;UACL,GAAGN,KAAK;UACRG,KAAK,EAAEF,QAAQ;UACfM,eAAe,EAAEL,UAAU,CAAC,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;UAC/DE,gBAAgB,EAAEN,UAAU,CAAC,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;UAClEG,eAAe,EAAEP,UAAU,CAAC,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;UAClEI,SAAS,EAAEN,IAAI,CAACO,GAAG,CAAC,CAAC,EAAEX,KAAK,CAACU,SAAS,GAAGN,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,OAAS,GAAG,MAAO,CAAC,CAAC;UACzFQ,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACtC,CAAC;MACH,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAElB;AAAa,CAAC,GAAGL,WAAW,CAACwB,OAAO;AACnD,eAAexB,WAAW,CAACyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}