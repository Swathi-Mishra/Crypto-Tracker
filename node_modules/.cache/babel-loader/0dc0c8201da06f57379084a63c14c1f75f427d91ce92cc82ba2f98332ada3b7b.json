{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport sampleData from '../../utils/sampleData';\nconst cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState: {\n    assets: sampleData\n  },\n  reducers: {\n    updatePrices: state => {\n      state.assets = state.assets.map(asset => ({\n        ...asset,\n        price: parseFloat((asset.price * (1 + Math.random() * 0.02 - 0.01)).toFixed(2)),\n        percentChange1h: parseFloat((Math.random() * 2 - 1).toFixed(2)),\n        percentChange24h: parseFloat((Math.random() * 3 - 1.5).toFixed(2)),\n        percentChange7d: parseFloat((Math.random() * 15 - 7.5).toFixed(2)),\n        volume24h: asset.volume24h + Math.floor(Math.random() * 1000000 - 500000)\n      }));\n    }\n  }\n});\nexport const {\n  updatePrices\n} = cryptoSlice.actions;\nexport default cryptoSlice.reducer;","map":{"version":3,"names":["createSlice","sampleData","cryptoSlice","name","initialState","assets","reducers","updatePrices","state","map","asset","price","parseFloat","Math","random","toFixed","percentChange1h","percentChange24h","percentChange7d","volume24h","floor","actions","reducer"],"sources":["C:/Users/admin/Downloads/crypto-tracker/src/features/crypto/cryptoSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport sampleData from '../../utils/sampleData';\n\nconst cryptoSlice = createSlice({\n  name: 'crypto',\n  initialState: {\n    assets: sampleData,\n  },\n  reducers: {\n    updatePrices: (state) => {\n      state.assets = state.assets.map(asset => ({\n        ...asset,\n        price: parseFloat((asset.price * (1 + Math.random() * 0.02 - 0.01)).toFixed(2)),\n        percentChange1h: parseFloat((Math.random() * 2 - 1).toFixed(2)),\n        percentChange24h: parseFloat((Math.random() * 3 - 1.5).toFixed(2)),\n        percentChange7d: parseFloat((Math.random() * 15 - 7.5).toFixed(2)),\n        volume24h: asset.volume24h + Math.floor(Math.random() * 1000000 - 500000)\n      }));\n    }\n  }\n});\n\nexport const { updatePrices } = cryptoSlice.actions;\nexport default cryptoSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,wBAAwB;AAE/C,MAAMC,WAAW,GAAGF,WAAW,CAAC;EAC9BG,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,MAAM,EAAEJ;EACV,CAAC;EACDK,QAAQ,EAAE;IACRC,YAAY,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACH,MAAM,GAAGG,KAAK,CAACH,MAAM,CAACI,GAAG,CAACC,KAAK,KAAK;QACxC,GAAGA,KAAK;QACRC,KAAK,EAAEC,UAAU,CAAC,CAACF,KAAK,CAACC,KAAK,IAAI,CAAC,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/EC,eAAe,EAAEJ,UAAU,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/DE,gBAAgB,EAAEL,UAAU,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;QAClEG,eAAe,EAAEN,UAAU,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;QAClEI,SAAS,EAAET,KAAK,CAACS,SAAS,GAAGN,IAAI,CAACO,KAAK,CAACP,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,OAAO,GAAG,MAAM;MAC1E,CAAC,CAAC,CAAC;IACL;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEP;AAAa,CAAC,GAAGL,WAAW,CAACmB,OAAO;AACnD,eAAenB,WAAW,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}